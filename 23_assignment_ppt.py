# -*- coding: utf-8 -*-
"""23 assignment ppt

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T_BeqabWOjnM_TXAwz8YuLS-uM9-DAcS
"""

#1solution

def calculate_depth(preorder):
    def helper(preorder, index):
        if index >= len(preorder):
            return 0, index

        if preorder[index] == 'l':
            return 0, index

        left_depth, index = helper(preorder, index + 1)
        right_depth, index = helper(preorder, index + 1)

        return max(left_depth, right_depth) + 1, index

    depth, _ = helper(preorder, 0)
    return depth


print(calculate_depth('nlnll'))
print(calculate_depth('nlnnlll'))

#2solution

class TreeNode:
    def __init__(self, value):
        self.val = value
        self.left = None
        self.right = None

def left_view(root):
    if not root:
        return

    queue = [(root, 0)]
    current_level = -1

    while queue:
        node, level = queue.pop(0)

        if level > current_level:
            print(node.val)
            current_level = level

        if node.left:
            queue.append((node.left, level + 1))
        if node.right:
            queue.append((node.right, level + 1))


root1 = TreeNode(4)
root1.left = TreeNode(5)
root1.right = TreeNode(2)
root1.right.left = TreeNode(3)
root1.right.right = TreeNode(1)
root1.right.left.left = TreeNode(6)
root1.right.left.right = TreeNode(7)

print("Left View 1:")
left_view(root1)


root2 = TreeNode(1)
root2.left = TreeNode(2)
root2.right = TreeNode(3)
root2.left.right = TreeNode(4)
root2.left.right.right = TreeNode(5)
root2.left.right.right.right = TreeNode(6)

print("\nLeft View 2:")
left_view(root2)

#3solution

class TreeNode:
    def __init__(self, value):
        self.val = value
        self.left = None
        self.right = None

def right_view(root):
    if not root:
        return

    queue = [(root, 0)]
    rightmost_nodes = {}

    while queue:
        node, level = queue.pop(0)

        # Update the rightmost node at the current level
        rightmost_nodes[level] = node.val

        if node.left:
            queue.append((node.left, level + 1))
        if node.right:
            queue.append((node.right, level + 1))

    # Print the values of rightmost nodes in sorted level order
    for level in sorted(rightmost_nodes.keys()):
        print(rightmost_nodes[level])

# Test cases
root1 = TreeNode(1)
root1.left = TreeNode(2)
root1.right = TreeNode(3)
root1.left.left = TreeNode(4)
root1.left.right = TreeNode(5)
root1.right.left = TreeNode(6)
root1.right.right = TreeNode(7)
root1.right.right.right = TreeNode(8)

print("Right View 1:")
right_view(root1)
# Output: 1 3 7 8

root2 = TreeNode(1)
root2.left = TreeNode(8)
root2.left.left = TreeNode(7)

print("\nRight View 2:")
right_view(root2)
# Output: 1 8 7

